name: Deploy HoloWellness Chatbot to AWS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Install frontend dependencies
      run: |
        npm install
        
    - name: Build frontend
      run: |
        npm run build
        
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements-prod.txt
        
    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy backend files
        cp -r backend/* deployment/
        
        # Copy built frontend to backend static folder
        mkdir -p deployment/static
        cp -r dist/* deployment/static/ 2>/dev/null || echo "No frontend build files found"
        
        # Copy deployment scripts
        cp -r deploy deployment/
        
        # Create deployment archive
        cd deployment
        tar -czf ../holowellness-deployment.tar.gz .
        
    - name: Upload to S3
      run: |
        # Create S3 bucket if it doesn't exist
        aws s3 mb s3://holowellness-deployments-${{ github.run_number }} --region ${{ secrets.AWS_REGION }} || true
        
        # Upload deployment package
        aws s3 cp holowellness-deployment.tar.gz s3://holowellness-deployments-${{ github.run_number }}/
        
        echo "DEPLOYMENT_BUCKET=holowellness-deployments-${{ github.run_number }}" >> $GITHUB_ENV
        
    - name: Deploy Infrastructure
      run: |
        # Make deployment scripts executable
        chmod +x deploy/*.sh
        
        # Set environment variables for deployment
        export REPO_URL="${{ github.repository }}"
        export DEPLOYMENT_BUCKET="${{ env.DEPLOYMENT_BUCKET }}"
        
        # Run infrastructure setup
        ./deploy/aws-setup.sh
        
    - name: Get Instance Information
      id: instance-info
      run: |
        if [ -f "instance-info.txt" ]; then
          source instance-info.txt
          echo "instance-ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "key-name=$KEY_NAME" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy Application
      if: steps.instance-info.outputs.instance-ip != ''
      run: |
        # Wait for instance to be ready
        sleep 120
        
        # Verify SSH key file exists (created by aws-setup.sh)
        if [ ! -f "holowellness-key.pem" ]; then
          echo "❌ SSH key file not found! Check aws-setup.sh execution."
          exit 1
        fi
        
        # Ensure correct permissions on SSH key
        chmod 400 holowellness-key.pem
        ls -l holowellness-key.pem
        
        # Create deployment script for remote execution  
        cat > remote-deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Configure AWS credentials on EC2 instance
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
        
        # Download and extract deployment package
        aws s3 cp s3://${{ env.DEPLOYMENT_BUCKET }}/holowellness-deployment.tar.gz /tmp/
        
        # Extract to application directory
        sudo mkdir -p /opt/holowellness
        sudo tar -xzf /tmp/holowellness-deployment.tar.gz -C /opt/holowellness
        sudo chown -R ubuntu:ubuntu /opt/holowellness
        
        # Run application deployment (skip repository cloning since we already have the files)
        cd /opt/holowellness
        
        # Debug: Check what files are available
        echo "📦 Step 1: Repository files already available from deployment package ✅"
        echo "🔍 Debug: Contents of /opt/holowellness:"
        ls -la
        echo ""
        
        # Ensure we're in the right directory
        echo "🐍 Step 2: Setting up Python Environment..."
        echo "📁 Current directory: $(pwd)"
        
        # Backend files are directly in /opt/holowellness (not in a backend subdirectory)
        echo "✅ Backend files found directly in /opt/holowellness"
        
        # Create virtual environment in the main directory
        python3 -m venv venv
        source venv/bin/activate
        
        # Install production dependencies with CPU-only PyTorch
        pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements-prod.txt
        
        echo "   ✅ Python environment ready"
        
        # Configure environment
        echo ""
        echo "⚙️  Step 3: Configuring Environment..."
        if [ -f ".env.production" ]; then
            cp .env.production .env
            echo "   ✅ Production environment configured"
        else
            echo "   ⚠️  .env.production not found, creating from example..."
            if [ -f ".env.example" ]; then
                cp .env.example .env
                echo "   Please edit .env with your actual credentials"
            fi
        fi
        
        # Continue with the rest of the deployment
        cd /opt/holowellness
        export FLASK_ENV=production
        export OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}"
        
        # Start the Flask application with gunicorn (production WSGI server)
        echo "🚀 Starting Flask application with Gunicorn..."
        
        # Ensure we're in the correct directory
        cd /opt/holowellness
        
        # Set environment variables for the app
        export FLASK_ENV=production
        export OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}"
        export PYTHONPATH="/opt/holowellness:$PYTHONPATH"
        
        # Kill any existing processes on port 5000 (use 5000 instead of 80 to avoid permission issues)
        sudo fuser -k 5000/tcp || true
        
        # Create a gunicorn config for better logging
        cat > gunicorn.conf.py << 'GUNICORN_CONFIG'
        bind = "0.0.0.0:5000"
        workers = 2
        timeout = 120
        keepalive = 5
        max_requests = 1000
        preload_app = True
        daemon = True
        user = "ubuntu"
        group = "ubuntu"
        GUNICORN_CONFIG
        
        # Start gunicorn from the virtual environment with proper paths
        echo "📁 Current directory: $(pwd)"
        echo "🐍 Python path: $PYTHONPATH"
        
        # Activate virtual environment and start gunicorn
        source venv/bin/activate
        python -c "import app; print('✅ App module can be imported')" || {
            echo "❌ Failed to import app module"
            python -c "import sys; print('Python path:', sys.path)"
            ls -la
            exit 1
        }
        
        # Start gunicorn with explicit module path
        nohup venv/bin/gunicorn --config gunicorn.conf.py app:app > gunicorn.log 2>&1 &
        GUNICORN_PID=$!
        
        echo "⏳ Waiting for application to start..."
        sleep 20
        
        # Check if application is running on port 5000
        if curl -f http://localhost:5000/health > /dev/null 2>&1; then
            echo "✅ Flask application started successfully on port 5000!"
            
            # Get public IP
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            
            # Configure simple nginx proxy to forward port 80 to 5000
            sudo tee /etc/nginx/sites-available/holowellness > /dev/null << 'NGINX_CONFIG'
        server {
            listen 80;
            server_name _;
    
            location / {
                proxy_pass http://127.0.0.1:5000;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                }
        }
        NGINX_CONFIG
            
            # Enable the site and restart nginx
            sudo ln -sf /etc/nginx/sites-available/holowellness /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo systemctl restart nginx
            
            echo "🌐 Application accessible at: http://$PUBLIC_IP/"
            echo "🤖 API endpoint: http://$PUBLIC_IP/api/chat"
            echo "📊 Health check: http://$PUBLIC_IP/health"
        else
            echo "❌ Flask application failed to start or not accessible"
            echo "🔍 Gunicorn logs:"
            cat gunicorn.log || echo "No log file found"
            echo "🔍 Checking process status:"
            ps aux | grep gunicorn || echo "No gunicorn processes found"
            echo "🔍 Checking port 5000:"
            ss -tlnp | grep :5000 || echo "Nothing listening on port 5000"
            exit 1
        fi
        
        echo "   ✅ Application started successfully"
        EOF
        
        # Copy and execute deployment script on remote instance
        scp -i holowellness-key.pem -o StrictHostKeyChecking=no remote-deploy.sh ubuntu@${{ steps.instance-info.outputs.instance-ip }}:/tmp/
        ssh -i holowellness-key.pem -o StrictHostKeyChecking=no ubuntu@${{ steps.instance-info.outputs.instance-ip }} "chmod +x /tmp/remote-deploy.sh && /tmp/remote-deploy.sh"
        
    - name: Health Check
      if: steps.instance-info.outputs.instance-ip != ''
      run: |
        # Wait for application to start
        sleep 30
        
        # Test health endpoint
        HEALTH_URL="http://${{ steps.instance-info.outputs.instance-ip }}/health"
        echo "Testing health endpoint: $HEALTH_URL"
        
        for i in {1..10}; do
          if curl -f $HEALTH_URL; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Waiting for application to start... (attempt $i/10)"
            sleep 30
          fi
        done
        
    - name: Deployment Summary
      if: steps.instance-info.outputs.instance-ip != ''
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📍 Instance IP: ${{ steps.instance-info.outputs.instance-ip }}"
        echo "🔗 Health Check: http://${{ steps.instance-info.outputs.instance-ip }}/health"
        echo "🤖 API Endpoint: http://${{ steps.instance-info.outputs.instance-ip }}/api/chat"
        echo "🌐 Application: http://${{ steps.instance-info.outputs.instance-ip }}/"
        
        # Save deployment info as artifact
        cat > deployment-info.txt << EOF
        Instance IP: ${{ steps.instance-info.outputs.instance-ip }}
        Instance ID: ${{ steps.instance-info.outputs.instance-id }}
        Health Check: http://${{ steps.instance-info.outputs.instance-ip }}/health
        API Endpoint: http://${{ steps.instance-info.outputs.instance-ip }}/api/chat
        Application URL: http://${{ steps.instance-info.outputs.instance-ip }}/
        Deployment Time: $(date)
        EOF
        
    - name: Upload deployment info
      if: steps.instance-info.outputs.instance-ip != ''
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: deployment-info.txt